1.proxyFactory:就是为了获取一个接口的代理类，例如获取一个远程接口的代理。
它有两个方法，代表两个作用

	1. a.getInvoker:对server端，将服务对象，如DemoServiceImpl包装成一个Invoker对象。
	2. b.getProxy :针对client端，创建接口代理对象，例如DemoSservice接口

2.Wrapper:它类似spring的BeanWarapper，它就是包装了一个接口或类，可以通过wrapper对实例对象进行赋值取值以及指定方法的调用

3.Invoker:他是一个可执行的对象，能够根据方法的名称、参数得到相应的执行结果
   它里面有一个很重要的方法invoke(Invocation invocation)，Invocation 包含了需要执行的方法和参数的重要信息；
  目前它只有两个实现类RpcInvocation，MockInvocation
    他有三种类型的Invoker
	1. 本地执行类的Invoker
	    server端：要执行demoService.sayHello，就通过InjvmExporter来进行反射执行demoService.sayHello就可以了
	2. 远程通信类的Invoker
	    client端：要执行demoService.sayHello，它封装了DubboInvoker进行远程通信，发送要执行的接口给server端
	    server端：采用了AbstractProxyInvoker执行了DemoServiceImpl.sayHello,然后将执行结果返回发送给client端
	3. 多个远程通信执行类的Invoker聚合成集群版的Invoker
	    client端：要执行demoService.sayHello，就要通过AbstractClusterInvoker来进行负载均衡，DubboInvoker进行远程通信，发送要执行的接口给server端
        server端：采用了AbstractProxyInvoker执行了DemoServiceImpl.sayHello,然后将执行结果返回发送给client端


4.Protocol
    1.export:暴露远程服务（用于服务端）,就是将proxyFactory.getInvoker创建的代理类invoker对象，通过协议暴露给外部
    2.refer：引用远程服务（用于客户端），通过proxyFactory.getProxy来创建远程的动态代理类，例如创建DemoService的远程动态接口
5.exporter:维护invoker的生命周期。

6.exchanger:信息交换层，封装请求响应模式，同步转异步

7.transporter:网络传输层，用来抽象netty和mina的统一接口。

8.Directory：目录服务
    StaticDirectory:静态目录服务，他的Invoker是固定的。
    RegistryDirectory：注册目录服务，他的Invoker集合数据来源于zk注册中心，它实现了NotifyListener接口，
    并且实现了回调函数notify(List<URL> urls),
    整个过程有一个重要的map变量methodInvokerMap（Invoker数据的来源，）同时也是Notify的重要操作对象,重点是写操作。